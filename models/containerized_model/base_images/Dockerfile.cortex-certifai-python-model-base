# Args:
# * TOOLKIT_PATH - Path containing Certifai Toolkit 'packages' folder
# * PY_VERSION - Python version to install. Defaults to 3.8
# * MINICONDA_URL - URL for installing Miniconda in the container (the binary is platform specific!)
#                   Defaults to x86_64 linux binary - see https://docs.conda.io/en/latest/miniconda.html

####################################################
## Build
####################################################
FROM registry.access.redhat.com/ubi9/ubi-minimal:latest AS build

USER root

# Library updates & Install wget
RUN microdnf update -y && \
    microdnf install wget findutils tar -y && \
    microdnf clean all -y

# Install miniconda and create an empty Python env
ARG MINICONDA_URL=https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
RUN wget --quiet $MINICONDA_URL -O /tmp/miniconda.sh && \
    /bin/bash /tmp/miniconda.sh -b -p /conda -u && \
    rm /tmp/miniconda.sh

# Add conda to path
ENV PATH=/conda/bin:$PATH

# Copy Certifai Toolkit packages and other requirements.txt
ARG TOOLKIT_PATH=certifai_toolkit
COPY $TOOLKIT_PATH/packages/all/cortex-certifai-common* \
     $TOOLKIT_PATH/packages/all/cortex-certifai-model-sdk* \
     requirements.txt /tmp/

# Create Python env and install conda-pack
ARG PY_VERSION=3.8
RUN conda create -n certifai python=$PY_VERSION -y && \
    conda install conda-pack

# Install Certifai Packages and other requirements, then use conda-pack to save the env in a standalone environment (/venv).
RUN conda run -n certifai pip install --no-cache-dir -r /tmp/requirements.txt \
       $(find /tmp -name cortex-certifai-common-*.zip)[s3,gcp,azure] \
       $(find /tmp -name cortex-certifai-model*.zip) && \
    conda-pack -n certifai --ignore-missing-files -o /tmp/env.tar && \
    mkdir /venv && \
    cd /venv && tar xf /tmp/env.tar && rm /tmp/env.tar && \
    /venv/bin/conda-unpack


####################################################
## Runtime
####################################################
FROM registry.access.redhat.com/ubi9/ubi-minimal:latest AS runtime

USER root

# Library Updates
RUN microdnf update -y && \
    microdnf clean all -y

LABEL release=1 \
  name="cortex-certifai-model-python$PY_VERSION-base" \
  vendor="CognitiveScale" \
  version=1 \
  summary="Cortex Certifai Enterprise Prediction Service Base Image" \
  description="Cortex Certifai Enterprise Prediction Service Base Image" \
  com.cognitivescale.license_terms="https://www.cognitivescale.com/legal-information/"


# Create .bashrc file and required folders for python, pip, and code that belong to the non-root user
RUN touch //.bashrc && \
    chown -R 1001 //.bashrc && chmod u+rwx //.bashrc && \
    mkdir -p /venv/bin /.local /.cache/pip /containerized_model /src /model /license && \
    chown -R 1001 /venv /.local /.cache/pip /containerized_model /src /model /license && \
    chmod -R u+rwx /venv /.local /.cache/pip /containerized_model /src /model /license

USER 1001

# Set flag to use default logging and configuration in Certifai containers. This avoids letting the application write
# to the filesystem for logs.
ENV CFI_RESTRICTED_FS_ACCESS="true"

# Add Python to path
ENV PATH=/venv/bin:$PATH

# Activate the virtualenv in the .bashrc, so python, pip, certifai, etc. are available when running the container
RUN echo 'source /venv/bin/activate' >> ~/.bashrc
SHELL ["/bin/bash", "--login", "-c"]

# Copy the python environment from the build stage
COPY --from=build /venv /venv

# Copy Prediction Service generation script
COPY . /containerized_model

# Set working directory
WORKDIR containerized_model
